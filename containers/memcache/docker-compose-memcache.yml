version: "3.7"

########################### NETWORKS ###########################
networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

########################### SERVICES ###########################
services:

############################# FRONTENDS ###########################

#############################
# Traefik 2 - Reverse Proxy #
#############################
  traefik:
    container_name: traefik
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $CFGDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $CFGDIR/traefik2/acme/acme.json:/acme.json 
      - $CFGDIR/traefik2/traefik.log:/traefik.log 
      - $CFGDIR/traefik2/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      ## HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      ## HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
      ## - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      ## - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" 
      ## - "traefik.http.routers.traefik-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file" 
      ## Middlewares
      ## - "traefik.http.routers.traefik-rtr.middlewares=traefik-headers,middlewares-rate-limit@file,middlewares-basic-auth@file" 
      ## - "traefik.http.routers.traefik-rtr.middlewares=middlewares-secure-headers@file,middlewares-rate-limit@file,middlewares-basic-auth@file"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" 
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolalloworiginlist=https://$DOMAINNAME"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.traefik-headers.headers.addvaryheader=true" 
      - "traefik.http.middlewares.traefik-headers.headers.allowedhosts=traefik.$DOMAINNAME" 
      - "traefik.http.middlewares.traefik-headers.headers.hostsproxyheaders=X-Forwarded-Host"
      - "traefik.http.middlewares.traefik-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.$DOMAINNAME" 
      - "traefik.http.middlewares.traefik-headers.headers.sslforcehost=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslproxyheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.traefik-headers.headers.stsseconds=63072000"
      - "traefik.http.middlewares.traefik-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.traefik-headers.headers.stspreload=true"
      - "traefik.http.middlewares.traefik-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.traefik-headers.headers.framedeny=true"
      ## - "traefik.http.middlewares.traefik-headers.headers.customframeoptionsvalue=SAMEORIGIN" # This option overrides FrameDeny
      - "traefik.http.middlewares.traefik-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true"
      ## - "traefik.http.middlewares.traefik-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; base-uri 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.referrerpolicy=same-origin"
      - "traefik.http.middlewares.traefik-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"

###################################
# Authelia (Lite) - SSO & 2F Auth #
###################################
##  authelia:
##    container_name: authelia
##    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
##    # image: authelia/authelia:latest
##    image: authelia/authelia
##    restart: always
##    networks:
##      - t2_proxy
##    # ports:
##    #   - "9091:9091"
##    expose:
##      - 9091
##    volumes:
##      - $CFGDIR/authelia:/config
##    environment:
##      - TZ=$TZ
##    labels:
##      - "traefik.enable=true"
##      ## HTTP Routers
##      - "traefik.http.routers.authelia-rtr.entrypoints=https"
##      - "traefik.http.routers.authelia-rtr.rule=HostHeader(`login.$DOMAINNAME`)"
##      - "traefik.http.routers.authelia-rtr.tls=true"
##      ## Middlewares
##      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
##      - "traefik.http.middlewares.authelia-rtr.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.cedeno.com/"
##      - "traefik.http.middlewares.authelia-rtr.forwardauth.trustForwardHeader=true"
##      - "traefik.http.middlewares.authelia-rtr.forwardauth.authResponseHeaders=Remote-User, Remote-Groups"
##      ## HTTP Services
##      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
##      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"


####################################
# Confluence - #
###################################
  confluence:
    container_name: concluence
    image: atlassian/confluence-server
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$CONFLUENCE_PORT_1:8090"
      - "$CONFLUENCE_PORT_2:8091"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $CFGDIR/confluence/data:/var/atlassian/application-data/confluence 
    environment:
      - TZ=$TZ
      - JVM_SUPPORT_RECOMMENDED_ARGS=-Djavax.net.ssl.trustStore=/var/atlassian/application-data/confluence/cacerts 
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.confluence-rtr.entrypoints=https"
      - "traefik.http.routers.confluence-rtr.rule=Host(`concluence.$DOMAINNAME`)"
      - "traefik.http.routers.confluence-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.confluence-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.confluence-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.confluence-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      # - "traefik.http.routers.confluence-rtr.middlewares=chain-authelia@file" # Authelia
      ## HTTP Services
      - "traefik.http.routers.confluence-rtr.service=confluence-svc"
      - "traefik.http.services.confluence-svc.loadbalancer.server.port=8090"


####################################
# Portainer - WebUI for Containers #
####################################
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ##ports:
      ## - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $CFGDIR/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file" # Authelia
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"


###########################################
# Heimdall - Unified Frontend Alternative #
###########################################
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ## ports:
      ## - "$HEIMDALL_PORT:80"
    volumes:
      - $CFGDIR/heimdall:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
      - "traefik.http.routers.heimdall-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-basic-auth@file" # Basic Authentication 
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"


##############################
# Ghost - blogging platform  #
##############################
  ghost:
    image: ghost
    container_name: ghost
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - t2_proxy
    volumes:
      - $CFGDIR/ghost:/var/lib/ghost/content
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.ghost-rtr.entrypoints=https"
      - "traefik.http.routers.ghost-rtr.rule=Host(`blog.$DOMAINNAME`)"
      - "traefik.http.routers.ghost-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.ghost-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.ghost-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.ghost-rtr.service=ghost-svc"
      - "traefik.http.services.ghost-svc.loadbalancer.server.port=2368"


###########################################
# Bitwarden - password management service #
###########################################
  # Installation Id: 815b11cb-471e-4f0d-a865-abf800a2fc64
  # Installation Key: UCKVA4XgtyWNKMKAT8sU
  bitwarden:
    image: bitwardenrs/server:latest
    container_name: bitwarden
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - t2_proxy
    volumes:
      - $CFGDIR/bitwarden:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.bitwarden-rtr.entrypoints=https"
      - "traefik.http.routers.bitwarden-rtr.rule=Host(`pw.$DOMAINNAME`)"
      - "traefik.http.routers.bitwarden-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.bitwarden-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.bitwarden-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.bitwarden-rtr.service=bitwarden-svc"
      - "traefik.http.services.bitwarden-svc.loadbalancer.server.port=80"


############################# SMART HOME #############################

############################# DATABASE #############################

# MariaDB - MySQL Database
  mariadb:
    container_name: mariadb
    image: linuxserver/mariadb:latest
    restart: always
    networks:
      # - default
      t2_proxy:
        ipv4_address: 192.168.90.250
    security_opt:
      - no-new-privileges:true
    ## ports:
    ## - "3306:3306"
    volumes:
      - $CFGDIR/mariadb/data:/config
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD

############################# DOWNLOADERS #############################


###################################
#qBittorrent - Torrent downloader #
###################################
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: always
    #network_mode: container:portainer
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $CFGDIR/qbtorrent:/config
      - $DATDIR/Torrents:/downloads
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      UMASK_SET: 002
      WEBUI_PORT: 8168
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=Host(`qbit.$DOMAINNAME`)"
      - "traefik.http.routers.qbittorrent-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.qbittorent-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8168"

###################################
# Couchpotato -  #
###################################
  couchpotato:
    image: linuxserver/couchpotato
    container_name: couchpotato
    restart: unless-stopped
    networks: 
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022
    volumes:
      - $CFGDIR/couchpotato:/config
      - $DATDIR/Torrents:/downloads
      - $DATDIR/jellyfin/movies:/movies
      - $DATDIR/jellyfin/tvseries:/tvshows
    ports:
      - 5050:5050
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.couchpotato-rtr.entrypoints=https"
      - "traefik.http.routers.couchpotato-rtr.rule=Host(`couchpotato.$DOMAINNAME`)"
      - "traefik.http.routers.couchpotato-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.couchpotato-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.couchpotato-rtr.service=couchpotato-svc"
      - "traefik.http.services.couchpotato-svc.loadbalancer.server.port=5050"

################################
# YouTube - YouTube Downloader #
################################
  youtube-dl:
    image: modenaf360/youtube-dl-nas
    container_name: youtube-dl
    restart: unless-stopped
    networks:
      - t2_proxy
    environment:
      - MY_ID=$YOUTUBE_DL_USER
      - MY_PW=$YOUTUBE_DL_PASSWD
    volumes:
      - $DATDIR/YouTube:/downfolder
    #ports:
    #  - 9002:8080
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.youtube-rtr.entrypoints=https"
      - "traefik.http.routers.youtube-rtr.rule=Host(`youtube-dl.$DOMAINNAME`)"
      - "traefik.http.routers.youtube-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.youtube-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.youtube-rtr.service=youtube-svc"
      - "traefik.http.services.youtube-svc.loadbalancer.server.port=8080"
    
############################# INDEXERS #############################

############################# PVRS #############################
    # Lidarr - Music Management
    # Radarr - Movie management
    # Sonarr - TV Shows management
    # Lazylibrarian  – Ebooks and Management
    

############################# MEDIA #############################

###########################
# Jellyfin - Media System #
###########################

  jellyfin:
    image: linuxserver/jellyfin
    container_name: jellyfin
    restart: unless-stopped
    networks:
      - t2_proxy    
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022 #optional
    volumes:
      - $CFGDIR/jellyfin/data:/config
      - /dev/shm:/ram_transcode      
      - $DATDIR/jellyfin/tvseries:/data/tvshows
      - $DATDIR/jellyfin/movies:/data/movies
      - $DATDIR/jellyfin/books:/data/books
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    security_opt:
      - no-new-privileges:true
    ports:
      - 8096:8096
      ##- 8920:8920 #optional
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jellyfin-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-rtr.rule=Host(`media.$DOMAINNAME`)"
      - "traefik.http.routers.jellyfin-rtr.tls=true"
      ## Middlewares
      ## - "traefik.http.routers.jellyfin-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.jellyfin-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      ## HTTP Services
      - "traefik.http.routers.jellyfin-rtr.service=jellyfin-svc"
      - "traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096"
    

#############################
# PhotoShow - Image Gallery #
#############################

  photoshow:
    image: linuxserver/photoshow:latest
    container_name: photoshow
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ## ports:
    ##  - "$PHOTOSHOW_PORT:80"
    volumes:
      - $CFGDIR/photoshow/data:/config
      - $CFGDIR/photoshow/thumbs:/Thumbs
      - $DATDIR/photoshow/photos:/Pictures:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.photoshow-rtr.entrypoints=https"
      - "traefik.http.routers.photoshow-rtr.rule=Host(`photoshow.$DOMAINNAME`)"
      - "traefik.http.routers.photoshow-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.jellyfin-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.photoshow-rtr.service=photoshow-svc"
      - "traefik.http.services.photoshow-svc.loadbalancer.server.port=80"

###################################
# piwigo - photo gallery software #
###################################
  piwigo:
    image: linuxserver/piwigo
    container_name: piwigo
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true    
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $CFGDIR/piwigo/data:/config
    ## ports:
      ## - 80:80
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.piwigo-rtr.entrypoints=https"
      - "traefik.http.routers.piwigo-rtr.rule=Host(`piwigo.$DOMAINNAME`)"
      - "traefik.http.routers.piwigo-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.piwigo-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.piwigo-rtr.service=piwigo-svc"
      - "traefik.http.services.piwigo-svc.loadbalancer.server.port=80"




    # linuxserver/daapd - https://github.com/linuxserver/docker-daapd
    # Medusa - https://github.com/linuxserver/docker-medusa
    # Piwigo - https://piwigo.org/
    # AirSonic - Music Server
    # Ombi - Media Requests


############################# MEDIA FILE MANAGEMENT #############################
    # Bazarr - Subtitle Management
    # Picard - Music Library Tagging and Management
    # Handbrake - Video Conversion (Transcoding and compression)
    # MKVToolNix - Video Editing (Remuxing - changing media container while keeping original source quality)
    # MakeMKV - Video Editing (Ripping from Disks)
    # FileBot - File renamer


  ############################# UTILITIES #############################

  # https://github.com/joemccann/dillinger

  # Firefox - Web Broswer. # 

###########################
# VSCode - VSCode Editing #
###########################
  vscode:
    image: codercom/code-server:latest
    container_name: vscode
    restart: unless-stopped
    networks:
      - t2_proxy
    #ports:
    #  - "$VSCODE_PORT:8080"
    volumes:
      #- $CFGDIR:/home/coder/mydocker
      #- $CFGDIR/vscode:/home/coder
      - $DATDIR/vscode/repo:/home/coder/repo
      - $DATDIR/vscode/repo/docker-code:/home/coder/repo/docker-compose
    environment:
      PASSWORD: $VSCODE_PASSWORD
      # Run as root first, create the directories, then change permissions to user:docker and 775. Disable run as root below.
      user: $PUID:$PGID
      #user: "0"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vscode-rtr.entrypoints=https"
      - "traefik.http.routers.vscode-rtr.rule=Host(`code.$DOMAINNAME`)"
      - "traefik.http.routers.vscode-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.vscode-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.vscode-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.vscode-rtr.middlewares=chain-no-auth@file" # No Authentication

      ## HTTP Services
      - "traefik.http.routers.vscode-rtr.service=vscode-svc"
      - "traefik.http.services.vscode-svc.loadbalancer.server.port=8080"


################################
# Glances - System Information #
################################
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    restart: unless-stopped
    privileged: true
    # network_mode: host
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      #- $USERDIR/docker/internal-disk/AppData/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      GLANCES_OPT: "-w"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME`)"
      - "traefik.http.routers.glances-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.glances-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.glances-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"


###################  
# Cloud Commander #
################### 
  cloudcmd:
    container_name: cloudcmd
    image: coderaiser/cloudcmd
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - ~:/root
      - /:/mnt/fs
      - /home/ajcborges/docker/internal-disk/:/omv-disk
      - /home/ajcborges/docker/external-disk/:/seagate-disk
      - $DATDIR:/docker-disk
      - $CFGDIR:/docker-config
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.cloudcmd-rtr.entrypoints=https"
      - "traefik.http.routers.cloudcmd-rtr.rule=Host(`cloudcmd.$DOMAINNAME`)"
      - "traefik.http.routers.cloudcmd-rtr.tls=true"
      ## Middlewares
      #- "traefik.http.routers.cloucmd-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.cloudcmd-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.cloudcmd-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      # - "traefik.http.routers.cloudcmd-rtr.middlewares=chain-authelia@file" # Authelia
      ## HTTP Services
      - "traefik.http.routers.cloudcmd-rtr.service=cloudcmd-svc"
      - "traefik.http.services.cloudcmd-svc.loadbalancer.server.port=8000"


########################################
# Dozzle - Real-time Docker Log Viewer #
########################################
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      - "traefik.http.routers.dozzle-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.dozzle-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"


########################################
# SeaFile -  #
########################################
  seafile:
    image: seafileltd/seafile-mc:latest
    container_name: seafile
    #ports:
    #  - "80:80"
    #  - "443:443"  # If https is enabled, cancel the comment.
    volumes:
      - $DATDIR/seafile:/shared   # Requested, specifies the path to Seafile data persistent store.
    environment:
      - DB_HOST=$DB_HOST
      - DB_ROOT_PASSWD=$MYSQL_ROOT_PASSWORD  # Requested, the value shuold be root's password of MySQL service.
      - TIME_ZONE=$TZ  # Optional, default is UTC. Should be uncomment and set to your local time zone.
      - SEAFILE_ADMIN_EMAIL=$SEAFILE_ADMIN_EMAIL # Specifies Seafile admin user, default is 'me@example.com'.
      - SEAFILE_ADMIN_PASSWORD=$SEAFILE_ADMIN_PASSWORD     # Specifies Seafile admin password, default is 'asecret'.
      - SEAFILE_SERVER_LETSENCRYPT=false   # Whether to use https or not.
      - SEAFILE_SERVER_HOSTNAME=$SEAFILE_SERVER_HOSTNAME # Specifies your host name if https is enabled.
    depends_on:
      - mariadb
      - memcached
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.seafile-rtr.entrypoints=https"
      - "traefik.http.routers.seafile-rtr.rule=Host(`repo.$DOMAINNAME`)"
      - "traefik.http.routers.seafile-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.seafile-rtr.middlewares=chain-no-auth@file"
      # - "traefik.http.routers.seafile-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      ## HTTP Services
      - "traefik.http.routers.seafile-rtr.service=seafile-svc"
      - "traefik.http.services.seafile-svc.loadbalancer.server.port=80"

    # https://github.com/shirosaidev/diskover

    # syncthing - https://syncthing.net/
    # davos - linuxserver/davos
    # resilio - https://www.resilio.com/individuals/
    # Duplicati - https://github.com/linuxserver/docker-duplicati
    # watchtower - https://dockstarter.com/apps/watchtower/
    # NetData -
    # rdesktop - Remote Desktop 
    # Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser
    # Create all databases and tables first
    # Guacamole Daemon - Needed for Guacamole
    # StatPing - Status Page & Monitoring Server
    # SmokePing - Network latency Monitoring
    # Domoticz -    https://github.com/linuxserver/docker-domoticz
    # OpenLDAP - linuxserver/ldap-auth
    # linuxserver/snipe-it  https://github.com/linuxserver/docker-snipe-it


############################# MAINTENANCE #############################

##########################
# CLoudFlare Dynamic DNS #
##########################  
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1


#############
# MemCache  #
#############  
  memcached:
    image: memcached:1.5.6
    container_name: seafile-memcached
    entrypoint: memcached -m 256
    networks:
      - t2_proxy

# Ouroboros - Automatic Docker Container Updates
